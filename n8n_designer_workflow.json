{
  "name": "Designer Jobs Search Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "designer-jobs-search",
        "options": {
          "timeout": 300000
        }
      },
      "id": "start",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "designer-jobs-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Prepare designer job search parameters\nconst inputData = $input.first().json;\n\n// Set default values for designer searches\nconst data = {\n  search_term: inputData.search_term || 'Product Designer UI UX Designer',\n  location: inputData.location || 'Worldwide',\n  results_wanted: inputData.results_wanted || 20,\n  is_remote: inputData.is_remote !== undefined ? inputData.is_remote : true,\n  site_name: inputData.site_name || ['indeed', 'linkedin', 'glassdoor'],\n  country_indeed: inputData.country_indeed || 'USA',\n  hours_old: inputData.hours_old || 168, // 1 week\n  job_type: inputData.job_type || 'fulltime',\n  linkedin_fetch_description: inputData.linkedin_fetch_description !== undefined ? inputData.linkedin_fetch_description : true,\n  description_format: inputData.description_format || 'markdown',\n  google_search_term: inputData.google_search_term || null,\n  distance: inputData.distance || 50,\n  linkedin_company_ids: inputData.linkedin_company_ids || null,\n  enforce_annual_salary: inputData.enforce_annual_salary || false,\n  verbose: inputData.verbose || 0,\n  user_agent: inputData.user_agent || null\n};\n\nreturn { json: data };"
      },
      "id": "prepare-designer-search",
      "name": "Prepare Designer Search",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "http://localhost:8000/scrape-jobs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "search_term",
              "value": "={{ $json.search_term }}"
            },
            {
              "name": "location",
              "value": "={{ $json.location }}"
            },
            {
              "name": "results_wanted",
              "value": "={{ $json.results_wanted }}"
            },
            {
              "name": "is_remote",
              "value": "={{ $json.is_remote }}"
            },
            {
              "name": "site_name",
              "value": "={{ $json.site_name }}"
            },
            {
              "name": "country_indeed",
              "value": "={{ $json.country_indeed }}"
            },
            {
              "name": "hours_old",
              "value": "={{ $json.hours_old }}"
            },
            {
              "name": "job_type",
              "value": "={{ $json.job_type }}"
            },
            {
              "name": "linkedin_fetch_description",
              "value": "={{ $json.linkedin_fetch_description }}"
            },
            {
              "name": "description_format",
              "value": "={{ $json.description_format }}"
            }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "scrape-designer-jobs",
      "name": "Scrape Designer Jobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process designer job results with specialized filtering\nconst response = $input.first().json;\n\n// Extract jobs and metadata\nconst jobs = response.jobs || [];\nconst metadata = response.metadata || {};\n\n// Filter and process designer jobs\nconst processedJobs = jobs\n  .filter(job => {\n    // Filter for design-related roles\n    const title = (job.title || '').toLowerCase();\n    const description = (job.description || '').toLowerCase();\n    \n    const designKeywords = [\n      'designer', 'design', 'ui', 'ux', 'user experience', 'user interface',\n      'product design', 'visual design', 'interaction design', 'ux/ui',\n      'figma', 'sketch', 'adobe', 'prototype', 'wireframe', 'usability'\n    ];\n    \n    return designKeywords.some(keyword => \n      title.includes(keyword) || description.includes(keyword)\n    );\n  })\n  .map((job, index) => {\n    // Extract key information for designers\n    const isRemote = job.is_remote || job.work_from_home_type === 'Remote' || \n                    (job.location && job.location.toLowerCase().includes('remote'));\n    \n    return {\n      id: job.id || `designer-job-${index}`,\n      title: job.title || 'N/A',\n      company: job.company || 'N/A',\n      location: job.location || 'N/A',\n      is_remote: isRemote,\n      job_url: job.job_url || '',\n      job_url_direct: job.job_url_direct || '',\n      company_url: job.company_url || '',\n      description: job.description || '',\n      job_type: job.job_type || [],\n      compensation: job.compensation || null,\n      date_posted: job.date_posted || null,\n      site: job.site || 'unknown',\n      \n      // Designer-specific fields\n      company_industry: job.company_industry || null,\n      company_logo: job.company_logo || null,\n      skills: job.skills || null,\n      experience_range: job.experience_range || null,\n      company_rating: job.company_rating || null,\n      company_reviews_count: job.company_reviews_count || null,\n      \n      // Salary information\n      min_salary: job.min_amount || null,\n      max_salary: job.max_amount || null,\n      currency: job.currency || null,\n      salary_interval: job.interval || null,\n      \n      // Additional metadata\n      emails: job.emails || null,\n      work_from_home_type: job.work_from_home_type || null\n    };\n  });\n\n// Sort by remote jobs first, then by date posted\nprocessedJobs.sort((a, b) => {\n  if (a.is_remote && !b.is_remote) return -1;\n  if (!a.is_remote && b.is_remote) return 1;\n  return new Date(b.date_posted || 0) - new Date(a.date_posted || 0);\n});\n\n// Create summary statistics\nconst stats = {\n  total_jobs: processedJobs.length,\n  remote_jobs: processedJobs.filter(job => job.is_remote).length,\n  onsite_jobs: processedJobs.filter(job => !job.is_remote).length,\n  jobs_with_salary: processedJobs.filter(job => job.min_salary || job.max_salary).length,\n  sites_found: [...new Set(processedJobs.map(job => job.site))],\n  companies: [...new Set(processedJobs.map(job => job.company))].length\n};\n\n// Return processed data\nreturn {\n  success: true,\n  total_jobs: processedJobs.length,\n  jobs: processedJobs,\n  metadata: {\n    ...metadata,\n    stats: stats,\n    processed_at: new Date().toISOString(),\n    search_type: 'designer_jobs'\n  }\n};"
      },
      "id": "process-designer-jobs",
      "name": "Process Designer Jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "jsCode": "// Handle error case for designer search\nconst response = $input.first().json;\n\nreturn {\n  success: false,\n  error: response.error || 'Unknown error occurred during designer job search',\n  traceback: response.traceback || null,\n  timestamp: new Date().toISOString(),\n  search_type: 'designer_jobs'\n};"
      },
      "id": "handle-designer-error",
      "name": "Handle Designer Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://your-webhook-url.com/designer-job-results",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "id": "send-designer-results",
      "name": "Send Designer Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://your-webhook-url.com/designer-job-errors",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "id": "send-designer-error",
      "name": "Send Designer Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 500]
    }
  ],
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "Prepare Designer Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Designer Search": {
      "main": [
        [
          {
            "node": "Scrape Designer Jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Designer Jobs": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Process Designer Jobs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Designer Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Designer Jobs": {
      "main": [
        [
          {
            "node": "Send Designer Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Designer Error": {
      "main": [
        [
          {
            "node": "Send Designer Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "designer-jobs-workflow",
  "tags": ["designer", "ui", "ux", "product-design", "remote"]
}
